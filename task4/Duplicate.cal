package task4;

actor Duplicate () uint(size=8) ByteIn, bool EOF ==> uint(size=8) ByteOut1, uint(size=8) ByteOut2:

  //Local Variable
  bool DEBUG := false;
  uint(size=32) BYTES_PER_FRAME := 152064;
  uint(size=8)  BYTES[BYTES_PER_FRAME];
  uint(size=32) nbByteRead;
  uint(size=32) nbByteSent;
  uint(size=32) nbFrame;
  bool peof := false;
  
  //action initialize
  initialize ==>
  do	
	if (DEBUG) then
	  println("# ACTION: initialize");
	  println("Next STATE: BufferFrame");
	  println("-------------------------");
	end
	nbByteRead         := 0;
	nbByteSent         := 0;
	nbFrame            := 1;
  end
	
  //Action readEOF	
  readEOF: action EOF:[p] ==>
  do
	peof := p;	
	if (DEBUG) then
	  println("# ACTION: readEOF");
	  if (peof) then
		println("EOF received");
		println("-------------------------");
	  else 
	    println("EOF not received");
	  end
	end		
	if (peof) then
	   println("-------------------------");
	   println("EOF received in Actor: Duplicate");
	   println("-------------------------");
	end		
  end
	
  // Action ReadData	
  readData.start: action ByteIn:[a] ==>
  guard
    nbByteRead < BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData.start");
       println("Frame: " + nbFrame + ", BYTES[" + nbByteRead + "]=" + a);
    end
    BYTES[nbByteRead] := a;
    nbByteRead := nbByteRead+1;
  end
  
  // Action ReadData.done	
  readData.done: action ==>
  guard
    nbByteRead = BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData.done");
       println("Frame: " + nbFrame + ", nbByteRead=" + nbByteRead);
       println("Next STATE: SendFrame");		
	   println("-------------------------");
    end
    nbByteSent := 0;
  end
  
  // Action sendData
  sendData.start: action ==> ByteOut1:[Out1], ByteOut2:[Out2]
  guard
	nbByteSent < BYTES_PER_FRAME 
  var
	uint(size=8) Out1, uint(size=8) Out2
  do
    if(DEBUG) then
       println("# ACTION: sendData.start");
       println("Frame: " + nbFrame + ", Send BYTES[" + nbByteSent + "]=" + Out1);
    end
	Out1 := BYTES[nbByteSent];
	Out2 := BYTES[nbByteSent];
	nbByteSent := nbByteSent + 1;
  end
  
  // Action sendData.done
  sendData.done: action ==>
  guard
	nbByteSent = BYTES_PER_FRAME 
  do
    if(DEBUG) then
       println("# ACTION: sendData.done");
       println("nbByteSent=" + nbByteSent);
       println("nbFrame=" + nbFrame);
       println("Next STATE: BufferFrame");		
	   println("-------------------------");
    end
	nbByteRead := 0;
	nbFrame := nbFrame + 1;
  end
  
  // FSM
  schedule fsm BufferFrame:
	BufferFrame (readEOF)        --> BufferFrame;
	BufferFrame (readData.start) --> BufferFrame;
	BufferFrame (readData.done)  --> SendFrame;
	SendFrame   (sendData.start) --> SendFrame;
	SendFrame   (sendData.done)  --> BufferFrame;
  end	
  
 end