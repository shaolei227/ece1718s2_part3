package task4;

actor Sum () uint(size=8) ByteIn ==> uint(size=32) sum:

  bool DEBUG := false;
  uint(size=32) BYTES_PER_FRAME := 152064;
  uint(size=8)  BYTES[BYTES_PER_FRAME];
  uint(size=32) nbByteRead;
  uint(size=32) nbFrame;
  uint(size=32) sum;
  uint(size=32) yuv_offset;
  uint(size=8)  send_complete;
  
  //action initialize
  initialize ==>
  do	
	if (DEBUG) then
	  println("# ACTION: initialize");
	  println("Next STATE: BufferFrame");
	  println("-------------------------");
	end
	nbByteRead      := 0;
	sum             := 0;
	nbFrame         := 1;
  end

  
  // Action 	
  readData.start: action ByteIn:[In] ==>
  guard
    nbByteRead < BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData.start");
       println("Frame: " + nbFrame + ", BYTES[" + nbByteRead + "]=" + In);
    end
    BYTES[nbByteRead] := In;
    nbByteRead := nbByteRead+1;
  end
  
  // Action ReadData.done	
  readData.done: action ==>
  guard
    nbByteRead = BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData.done");
       println("Frame: " + nbFrame + ", nbByteRead=" + nbByteRead);
       println("Next STATE: FindSum");		
	   println("-------------------------");
    end
    nbByteRead := 0;
    sum        := 0;
    yuv_offset := 0;
  end
  
  // Action 
  FindSum.start: action  ==>
  guard
    yuv_offset < BYTES_PER_FRAME
  do
    sum := sum + BYTES[yuv_offset];
    if(DEBUG) then
       println("# ACTION: FindSum.start");
       println("sum="+sum+", BYTES["+yuv_offset+"]="+BYTES[yuv_offset]);
    end
    yuv_offset := yuv_offset+1;
  end
  
  // Action	
  FindSum.done: action  ==>
  guard
    yuv_offset = BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: FindSum.done");
       println("Next STATE: SendSum");		
	   println("-------------------------");
    end
    send_complete := 0;
  end
  
  // Action sendData
  sendData.start: action ==> sum:[Out]
  guard
     send_complete < 1
  var
	uint(size=32) Out
  do
    Out := sum;
    if(DEBUG) then
       println("# ACTION: sendData.start");
       println("Frame: " + nbFrame + ", Send SUM==" + Out);
    end
	send_complete := send_complete + 1;
  end
  
  // Action sendData.done
  sendData.done: action ==>
  guard
	send_complete = 1 
  do
    if(DEBUG) then
       println("# ACTION: sendData.done");
       println("nbFrame=" + nbFrame);
       println("Next STATE: BufferFrame");		
	   println("-------------------------");
    end
	nbFrame := nbFrame + 1;
	nbByteRead := 0;
  end
  
    // FSM
  schedule fsm BufferFrame: 
	BufferFrame   (readData.start)   --> BufferFrame;
	BufferFrame   (readData.done)    --> FindSum;
	FindSum       (FindSum.start)    --> FindSum;
	FindSum       (FindSum.done)     --> SendSum;
	SendSum       (sendData.start)   --> SendSum;
	SendSum       (sendData.done)    --> BufferFrame;
  end
  
end