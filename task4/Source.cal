package task4;


actor Source () ==> uint(size=8) Stream, bool EOF:

	bool  	DEBUG := false;
	
	@native procedure source_init()
	end

	@native procedure source_readNBytes(uint(size=8) outTable[NB_TOKEN_TO_SENT], uint(size=12) nbTokenToRead)
	end

	@native function source_sizeOfFile() --> int(size=32)
	end

	@native procedure source_rewind()
	end

	@native function source_getNbLoop() --> uint
	end
	
	@native procedure source_close()
	end

//	uint(size=32) NB_TOKEN_TO_SENT = 4096;
	uint(size=32) NB_TOKEN_TO_SENT = 1; 

	uint(size=8) bytesRead[NB_TOKEN_TO_SENT];

	uint(size=32) iterationLoop := 0;
	uint(size=32) nbByteLeft;
	uint(size=13) nbByteToSend := 0;
	uint(size=13) nbByteSent := 0;
	uint(size=32) nbIteration;
	bool		  lastIterationDone := false;
	bool          endOfFile := false;

	initialize ==>
	do
		source_init();
		
		if (DEBUG) then
			println("Source ACTION: initialize");
			println("Source STATE: ReadInit");
			println("-------------------------");
		end
	end
	
	getFileSize: action ==>
	guard
		source_sizeOfFile() > 0
	var
		uint(size=32) nbBytes
	do
		nbBytes := source_sizeOfFile();
		nbIteration := nbBytes / NB_TOKEN_TO_SENT;
		nbByteLeft := nbBytes mod NB_TOKEN_TO_SENT;
		
		if (DEBUG) then
			println("Source ACTION: getFileSize");
			println("Source STATE: ReadFile");
			println("-------------------------");
		end
	end
	
	readNBytes: action ==>
	guard
		iterationLoop < nbIteration
	do
		source_readNBytes(bytesRead, NB_TOKEN_TO_SENT);
		nbByteToSend := NB_TOKEN_TO_SENT;
		nbByteSent := 0;
		iterationLoop := iterationLoop + 1;
		
		if (DEBUG) then
			println("Source ACTION: readNbytes");
			println("Source STATE: SendData");
			println("-------------------------");
		end		
	end
	
	readEndOfFile: action ==>
	guard
		nbByteLeft > 0
	do
		source_readNBytes(bytesRead, nbByteLeft);
		nbByteToSend := nbByteLeft;
		nbByteSent := 0;
		
		if (DEBUG) then
			println("Source ACTION: readEndOfFile");
			println("Source STATE: SendLastData");
			println("-------------------------");
		end		
	end
	
	closeFile: action ==> EOF:[ endOfFile ]
	guard
		endOfFile = false
	do	
		
		source_close();
        	
        if (DEBUG) then
			println("Source ACTION: closeFile");
			println("Source STATE: ReadFileDone");
			println("-------------------------");
		end
		endOfFile := true;			
	end
	
	sendData.launch: action ==> Stream:[ Out ], EOF:[ endOfFile ]
	guard
		nbByteToSend > nbByteSent
	var
		uint(size=8) Out
	do
		Out := bytesRead[nbByteSent];
		nbByteSent := nbByteSent + 1;
		
		if (DEBUG) then
			println("Source ACTION: sendData.launch");
        	if ( ( iterationLoop = nbIteration ) and lastIterationDone ) then
				println("Source STATE: SendLastData");	
				println("-------------------------");      	
        	else
				println("Source STATE: SendData");
				println("-------------------------");
			end
		end
	end
	
	sendData.done: action ==>
	guard
		nbByteToSend = nbByteSent
	do		
		if (DEBUG) then
			println("Source ACTION: sendData.done");
        	if ( ( iterationLoop = nbIteration ) and lastIterationDone )then
				println("Source STATE: ReadFileDone");
				println("-------------------------");
        	else
				println("Source STATE: ReadFile");
				println("-------------------------");	
				if ( iterationLoop = nbIteration) then
					lastIterationDone := true;
				end		
			end
		end
	end
	
	schedule fsm ReadInit :
		ReadInit (getFileSize) --> ReadFile;
		ReadFile (readNBytes   ) --> SendData;
		ReadFile (readEndOfFile) --> SendLastData;
		ReadFile (sendData.done) --> ReadFileDone;
		SendData (sendData.launch) --> SendData;
		SendData (sendData.done  ) --> ReadFile;
		SendLastData (sendData.launch) --> SendLastData;
		SendLastData (sendData.done  ) --> ReadFileDone;
		ReadFileDone (closeFile) --> ReadFileDone;	
	end
	
	priority
		readNBytes > readEndOfFile > sendData.done;		
		sendData.launch > sendData.done;
	end

end
