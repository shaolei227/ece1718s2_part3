package task4;

actor AbsDiff () uint(size=8) ByteIn1,uint(size=8) ByteIn2 ==> uint(size=8) ByteOut:

  //Local Variable
  bool DEBUG := false;
  uint(size=32) BYTES_PER_FRAME := 152064;
  uint(size=8)  BYTES[BYTES_PER_FRAME];
  uint(size=8)  STREAM_1[BYTES_PER_FRAME];
  uint(size=8)  STREAM_2[BYTES_PER_FRAME];
  uint(size=32) nbByteRead_s1;
  uint(size=32) nbByteRead_s2;
  uint(size=32) nbByteSent;
  uint(size=32) nbFrame;
  uint(size=32) yuv_offset;
  
  //action initialize
  initialize ==>
  do	
	if (DEBUG) then
	  println("# ACTION: initialize");
	  println("Next STATE: BufferFrame");
	  println("-------------------------");
	end
	nbByteRead_s1      := 0;
	nbByteRead_s2      := 0;
	nbByteSent         := 0;
	nbFrame            := 1;
  end
  
  // Action ReadData
  readData_s1.start: action ByteIn1:[In] ==>
  guard
    nbByteRead_s1 < BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData_s1.start");
       println("Frame: " + nbFrame + ", STREAM_1[" + nbByteRead_s1 + "]=" + In);
    end
    STREAM_1[nbByteRead_s1] := In;
    nbByteRead_s1 := nbByteRead_s1+1;
  end
  
  // Action ReadData	
  readData_s2.start: action ByteIn2:[In] ==>
  guard
    nbByteRead_s2 < BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData_s2.start");
       println("Frame: " + nbFrame + ", STREAM_2[" + nbByteRead_s2 + "]=" + In);
    end
    STREAM_2[nbByteRead_s2] := In;
    nbByteRead_s2 := nbByteRead_s2+1;
  end
  
  // Action ReadData.done	
  readData.done: action ==>
  guard
    nbByteRead_s1 = BYTES_PER_FRAME and nbByteRead_s2 = BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: readData.done");
       println("Frame: " + nbFrame + ", nbByteRead_s1=" + nbByteRead_s1 + ", nbByteRead_s2=" + nbByteRead_s2);
       println("Next STATE: FindDiff");		
	   println("-------------------------");
    end
    yuv_offset := 0;
  end
  
  // Action 	
  AbsDiff.start: action  ==>
  guard
    yuv_offset < BYTES_PER_FRAME
  var
    uint(size=32) absdiff_local
  do
    if( STREAM_1[yuv_offset] >= STREAM_2[yuv_offset] ) then
       absdiff_local := STREAM_1[yuv_offset] - STREAM_2[yuv_offset];
    else 
       absdiff_local := STREAM_2[yuv_offset] - STREAM_1[yuv_offset];
    end
    if(DEBUG) then
       println("# ACTION: AbsDiff.start");
       println("STREAM_1["+yuv_offset+"]="+STREAM_1[yuv_offset]+", STREAM_2["+yuv_offset+"]="+STREAM_2[yuv_offset]+", ABSDIFF="+absdiff_local);
    end
    BYTES[yuv_offset] := absdiff_local;
    yuv_offset := yuv_offset+1;
  end
  
  // Action 
  AbsDiff.done: action  ==>
  guard
    yuv_offset = BYTES_PER_FRAME
  do
    if(DEBUG) then
       println("# ACTION: AbsDiff.done");
       println("Next STATE: SendFrame");		
	   println("-------------------------");
    end
     nbByteSent := 0;
  end
  
  // Action 
  sendData.start: action ==> ByteOut:[Out]
  guard
	nbByteSent < BYTES_PER_FRAME 
  var
	uint(size=8) Out
  do
    if(DEBUG) then
       println("# ACTION: sendData.start");
       println("Frame: " + nbFrame + ", Send BYTES[" + nbByteSent + "]=" + BYTES[nbByteSent]);
    end
	Out := BYTES[nbByteSent];
	nbByteSent := nbByteSent + 1;
  end
  
  // Action sendData.done
  sendData.done: action ==>
  guard
	nbByteSent = BYTES_PER_FRAME 
  do
    if(DEBUG) then
       println("# ACTION: sendData.done");
       println("nbByteSent=" + nbByteSent);
       println("nbFrame=" + nbFrame);
       println("Next STATE: BufferFrame");		
	   println("-------------------------");
    end
	nbFrame := nbFrame + 1;
    nbByteRead_s1      := 0;
	nbByteRead_s2      := 0;
  end
  
  // FSM
  schedule fsm BufferFrame:
	BufferFrame   (readData_s1.start) --> BufferFrame;
	BufferFrame   (readData_s2.start) --> BufferFrame;
	BufferFrame   (readData.done)     --> FindDiff;
	FindDiff      (AbsDiff.start)     --> FindDiff;
	FindDiff      (AbsDiff.done)      --> SendFrame;
	SendFrame     (sendData.start)    --> SendFrame;
	SendFrame     (sendData.done)     --> BufferFrame;
  end


end